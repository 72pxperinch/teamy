{"ast":null,"code":"import Axios from \"axios\";\nimport { USER_LIST_REQUEST, USER_LIST_SUCCESS, USER_LIST_FAIL, USER_CREATE_REQUEST, USER_CREATE_SUCCESS, USER_CREATE_FAIL, USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL, USER_DELETE_REQUEST, USER_DELETE_SUCCESS, USER_DELETE_FAIL } from \"./userConstants\";\nconst BASE_URL = \"http://localhost:5500/users\";\nconst listUsers = (pageNumber = 1, limit = 20, searchQuery = '', filterGender = '', filterDomain = '', filterAvailability = null) => async (dispatch, getState) => {\n  console.log(\"List User\");\n  try {\n    dispatch({\n      type: USER_LIST_REQUEST\n    });\n    if (filterAvailability === \"\") {\n      filterAvailability = null;\n    }\n    let url = `${BASE_URL}?page=${pageNumber}&limit=${limit}&name=${searchQuery}&gender=${filterGender}&domain=${filterDomain}`;\n    if (filterAvailability !== null) {\n      url += `&availability=${filterAvailability}`;\n    }\n    const {\n      data\n    } = await Axios.get(url);\n    dispatch({\n      type: USER_LIST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_LIST_FAIL,\n      payload: error.message\n    });\n  }\n};\nconst createUser = ({\n  first_name,\n  last_name,\n  email,\n  gender,\n  avatar,\n  domain,\n  available\n}) => async (dispatch, getState) => {\n  console.log(\"Create User\");\n  dispatch({\n    type: USER_CREATE_REQUEST,\n    payload: {\n      first_name,\n      last_name,\n      email,\n      gender,\n      avatar,\n      domain,\n      available\n    }\n  });\n  try {\n    const {\n      data\n    } = await Axios.post(BASE_URL, {\n      first_name,\n      last_name,\n      email,\n      gender,\n      avatar,\n      domain,\n      available\n    });\n    dispatch({\n      type: USER_CREATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_CREATE_FAIL,\n      payload: error.message\n    });\n  }\n};\nconst updateUser = ({\n  userId,\n  first_name,\n  last_name,\n  email,\n  gender,\n  avatar,\n  domain,\n  available\n}) => async (dispatch, getState) => {\n  console.log(\"Update User\");\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      first_name,\n      last_name,\n      email,\n      gender,\n      avatar,\n      domain,\n      available\n    }\n  });\n  try {\n    const {\n      data\n    } = await Axios.put(`${BASE_URL}/${userId}`, {\n      first_name,\n      last_name,\n      email,\n      gender,\n      avatar,\n      domain,\n      available\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\nconst deleteUser = userId => async (dispatch, getState) => {\n  console.log(\"Delete User\");\n  try {\n    dispatch({\n      type: USER_DELETE_REQUEST\n    });\n    await Axios.delete(`${BASE_URL}/${userId}`);\n    dispatch({\n      type: USER_DELETE_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: USER_DELETE_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport { createUser, deleteUser, updateUser, listUsers };","map":{"version":3,"names":["Axios","USER_LIST_REQUEST","USER_LIST_SUCCESS","USER_LIST_FAIL","USER_CREATE_REQUEST","USER_CREATE_SUCCESS","USER_CREATE_FAIL","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","USER_DELETE_REQUEST","USER_DELETE_SUCCESS","USER_DELETE_FAIL","BASE_URL","listUsers","pageNumber","limit","searchQuery","filterGender","filterDomain","filterAvailability","dispatch","getState","console","log","type","url","data","get","payload","error","message","createUser","first_name","last_name","email","gender","avatar","domain","available","post","updateUser","userId","put","deleteUser","delete"],"sources":["/Users/hafidhfarhans/Desktop/teamy/teamy/src/userActions.js"],"sourcesContent":["import Axios from \"axios\";\nimport {\n  USER_LIST_REQUEST,\n  USER_LIST_SUCCESS,\n  USER_LIST_FAIL,\n  USER_CREATE_REQUEST,\n  USER_CREATE_SUCCESS,\n  USER_CREATE_FAIL,\n  USER_UPDATE_REQUEST,\n  USER_UPDATE_SUCCESS,\n  USER_UPDATE_FAIL,\n  USER_DELETE_REQUEST,\n  USER_DELETE_SUCCESS,\n  USER_DELETE_FAIL\n} from \"./userConstants\";\n\nconst BASE_URL = \"http://localhost:5500/users\";\n\nconst listUsers = (\n  pageNumber = 1,\n  limit = 20,\n  searchQuery = '',\n  filterGender = '',\n  filterDomain = '',\n  filterAvailability = null\n) => async (dispatch, getState) => {\n  console.log(\"List User\");\n  try {\n    dispatch({ type: USER_LIST_REQUEST });\n\n    if (filterAvailability === \"\") {\n      filterAvailability = null\n    }\n    let url = `${BASE_URL}?page=${pageNumber}&limit=${limit}&name=${searchQuery}&gender=${filterGender}&domain=${filterDomain}`;\n\n    if (filterAvailability !== null) {\n      url += `&availability=${filterAvailability}`;\n    }\n\n    const { data } = await Axios.get(url);\n    dispatch({ type: USER_LIST_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: USER_LIST_FAIL, payload: error.message });\n  }\n};\n\nconst createUser = ({ first_name, last_name, email, gender, avatar, domain, available }) => async (dispatch, getState) => {\n  console.log(\"Create User\");\n  dispatch({ type: USER_CREATE_REQUEST, payload: { first_name, last_name, email, gender, avatar, domain, available } });\n  try {\n    const { data } = await Axios.post(BASE_URL, {\n      first_name,\n      last_name,\n      email,\n      gender,\n      avatar,\n      domain,\n      available\n    });\n    dispatch({ type: USER_CREATE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: USER_CREATE_FAIL, payload: error.message });\n  }\n};\n\nconst updateUser = ({ userId, first_name, last_name, email, gender, avatar, domain, available }) => async (dispatch, getState) => {\n  console.log(\"Update User\");\n  dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, first_name, last_name, email, gender, avatar, domain, available } });\n  try {\n    const { data } = await Axios.put(`${BASE_URL}/${userId}`, {\n      first_name,\n      last_name,\n      email,\n      gender,\n      avatar,\n      domain,\n      available\n    });\n    dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\n  }\n};\n\nconst deleteUser = (userId) => async (dispatch, getState) => {\n\n  console.log(\"Delete User\");\n  try {\n    dispatch({ type: USER_DELETE_REQUEST });\n    await Axios.delete(`${BASE_URL}/${userId}`);\n    dispatch({ type: USER_DELETE_SUCCESS });\n  } catch (error) {\n    dispatch({ type: USER_DELETE_FAIL, payload: error.message });\n  }\n};\n\nexport { createUser, deleteUser, updateUser, listUsers };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}